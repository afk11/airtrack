// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: message.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// SourceType - enumeration of types of message producers
type Source_SourceType int32

const (
	Source_AdsbExchange Source_SourceType = 0
	Source_BeastServer  Source_SourceType = 1
)

// Enum value maps for Source_SourceType.
var (
	Source_SourceType_name = map[int32]string{
		0: "AdsbExchange",
		1: "BeastServer",
	}
	Source_SourceType_value = map[string]int32{
		"AdsbExchange": 0,
		"BeastServer":  1,
	}
)

func (x Source_SourceType) Enum() *Source_SourceType {
	p := new(Source_SourceType)
	*p = x
	return p
}

func (x Source_SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Source_SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[0].Descriptor()
}

func (Source_SourceType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[0]
}

func (x Source_SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Source_SourceType.Descriptor instead.
func (Source_SourceType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0, 0}
}

// Source contains information about which receiver produced the message
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name - name of the producer. ADSB Exchange is 'adsbx'.
	// Beast Servers use the name from the config entry.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Type - type of producer that produced this message
	Type Source_SourceType `protobuf:"varint,2,opt,name=Type,proto3,enum=airtrack.Source_SourceType" json:"Type,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *Source) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Source) GetType() Source_SourceType {
	if x != nil {
		return x.Type
	}
	return Source_AdsbExchange
}

// Signal contains signal strength information about the received message
type Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rssi - signal strength
	Rssi float64 `protobuf:"fixed64,1,opt,name=Rssi,proto3" json:"Rssi,omitempty"`
}

func (x *Signal) Reset() {
	*x = Signal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal) ProtoMessage() {}

func (x *Signal) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal.ProtoReflect.Descriptor instead.
func (*Signal) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *Signal) GetRssi() float64 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

// AircraftInfo represents an entry in the readsb database, containing
// information about the aircraft
type AircraftInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registration - assigned registration for the aircraft.
	Registration string `protobuf:"bytes,1,opt,name=Registration,proto3" json:"Registration,omitempty"`
	// TypeCode - identifies the type of aircraft
	TypeCode string `protobuf:"bytes,2,opt,name=TypeCode,proto3" json:"TypeCode,omitempty"`
	// F
	F string `protobuf:"bytes,3,opt,name=F,proto3" json:"F,omitempty"`
	// Description - brief description of the aircraft type for humans
	Description string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *AircraftInfo) Reset() {
	*x = AircraftInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AircraftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AircraftInfo) ProtoMessage() {}

func (x *AircraftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AircraftInfo.ProtoReflect.Descriptor instead.
func (*AircraftInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *AircraftInfo) GetRegistration() string {
	if x != nil {
		return x.Registration
	}
	return ""
}

func (x *AircraftInfo) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *AircraftInfo) GetF() string {
	if x != nil {
		return x.F
	}
	return ""
}

func (x *AircraftInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Operator represents an entry in the readsb operators database, and
// contains information about the operator of the current flight.
type Operator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name - name of the operator
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// CountryName - where the operator is based
	CountryName string `protobuf:"bytes,2,opt,name=CountryName,proto3" json:"CountryName,omitempty"`
	// R
	R string `protobuf:"bytes,3,opt,name=R,proto3" json:"R,omitempty"`
}

func (x *Operator) Reset() {
	*x = Operator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator) ProtoMessage() {}

func (x *Operator) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator.ProtoReflect.Descriptor instead.
func (*Operator) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

func (x *Operator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Operator) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *Operator) GetR() string {
	if x != nil {
		return x.R
	}
	return ""
}

// Message - a payload produced by one of our receivers
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source identifies the receiver which produced the message
	Source *Source `protobuf:"bytes,1,opt,name=Source,proto3" json:"Source,omitempty"`
	// Signal contains information about the signal strength. Only
	// set for BEAST messages currently.
	Signal *Signal `protobuf:"bytes,2,opt,name=Signal,proto3" json:"Signal,omitempty"`
	// Icao - 6 character hex identifier for aircraft
	Icao string `protobuf:"bytes,10,opt,name=Icao,proto3" json:"Icao,omitempty"`
	// Squawk - a 4 digit octal squawk code (as a string)
	Squawk string `protobuf:"bytes,11,opt,name=Squawk,proto3" json:"Squawk,omitempty"`
	// CallSign - aircrafts flight ID/callsign
	CallSign string `protobuf:"bytes,12,opt,name=CallSign,proto3" json:"CallSign,omitempty"`
	// AltitudeGeometric - geometric altitude
	AltitudeGeometric string `protobuf:"bytes,13,opt,name=AltitudeGeometric,proto3" json:"AltitudeGeometric,omitempty"`
	// AltitudeBarometric - barometric altitude
	AltitudeBarometric string `protobuf:"bytes,14,opt,name=AltitudeBarometric,proto3" json:"AltitudeBarometric,omitempty"`
	// Latitude - latitude coordinate
	Latitude string `protobuf:"bytes,20,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	// Longitude - longitude coordinate
	Longitude string `protobuf:"bytes,21,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	// IsOnGround is '1' if the aircraft is on ground, '0' otherwise
	IsOnGround bool `protobuf:"varint,30,opt,name=IsOnGround,proto3" json:"IsOnGround,omitempty"`
	// VerticalRateGeometric - change in altitude by ft per minute (UNITS??)
	VerticalRateGeometric int64 `protobuf:"varint,40,opt,name=VerticalRateGeometric,proto3" json:"VerticalRateGeometric,omitempty"`
	// HaveVerticalRateGeometric - whether VerticalRateGeometric is set
	HaveVerticalRateGeometric bool `protobuf:"varint,41,opt,name=HaveVerticalRateGeometric,proto3" json:"HaveVerticalRateGeometric,omitempty"`
	// VerticalRateBarometric - change in altitude by ft per minute (UNITS??)
	VerticalRateBarometric int64 `protobuf:"varint,45,opt,name=VerticalRateBarometric,proto3" json:"VerticalRateBarometric,omitempty"`
	// HaveVerticalRateBarometric - whether VerticalRateBarometric is set
	HaveVerticalRateBarometric bool    `protobuf:"varint,46,opt,name=HaveVerticalRateBarometric,proto3" json:"HaveVerticalRateBarometric,omitempty"`
	Track                      string  `protobuf:"bytes,50,opt,name=Track,proto3" json:"Track,omitempty"`
	MagneticHeading            float64 `protobuf:"fixed64,51,opt,name=MagneticHeading,proto3" json:"MagneticHeading,omitempty"`
	HaveMagneticHeading        bool    `protobuf:"varint,52,opt,name=HaveMagneticHeading,proto3" json:"HaveMagneticHeading,omitempty"`
	TrueHeading                float64 `protobuf:"fixed64,53,opt,name=TrueHeading,proto3" json:"TrueHeading,omitempty"`
	HaveTrueHeading            bool    `protobuf:"varint,54,opt,name=HaveTrueHeading,proto3" json:"HaveTrueHeading,omitempty"`
	// HaveFmsAltitude - used to indicate that FmsAltitude is set
	HaveFmsAltitude bool `protobuf:"varint,60,opt,name=HaveFmsAltitude,proto3" json:"HaveFmsAltitude,omitempty"`
	// FmsAltitude - the target altitude set on the aircrafts navigation
	FmsAltitude int64 `protobuf:"varint,61,opt,name=FmsAltitude,proto3" json:"FmsAltitude,omitempty"`
	// HaveCategory - used to indicate that Category is set
	HaveCategory bool `protobuf:"varint,70,opt,name=HaveCategory,proto3" json:"HaveCategory,omitempty"`
	// Category - type of the transponder
	Category string `protobuf:"bytes,71,opt,name=Category,proto3" json:"Category,omitempty"`
	// GroundSpeed - speed in knots
	GroundSpeed string `protobuf:"bytes,90,opt,name=GroundSpeed,proto3" json:"GroundSpeed,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

func (x *Message) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Message) GetSignal() *Signal {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *Message) GetIcao() string {
	if x != nil {
		return x.Icao
	}
	return ""
}

func (x *Message) GetSquawk() string {
	if x != nil {
		return x.Squawk
	}
	return ""
}

func (x *Message) GetCallSign() string {
	if x != nil {
		return x.CallSign
	}
	return ""
}

func (x *Message) GetAltitudeGeometric() string {
	if x != nil {
		return x.AltitudeGeometric
	}
	return ""
}

func (x *Message) GetAltitudeBarometric() string {
	if x != nil {
		return x.AltitudeBarometric
	}
	return ""
}

func (x *Message) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *Message) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *Message) GetIsOnGround() bool {
	if x != nil {
		return x.IsOnGround
	}
	return false
}

func (x *Message) GetVerticalRateGeometric() int64 {
	if x != nil {
		return x.VerticalRateGeometric
	}
	return 0
}

func (x *Message) GetHaveVerticalRateGeometric() bool {
	if x != nil {
		return x.HaveVerticalRateGeometric
	}
	return false
}

func (x *Message) GetVerticalRateBarometric() int64 {
	if x != nil {
		return x.VerticalRateBarometric
	}
	return 0
}

func (x *Message) GetHaveVerticalRateBarometric() bool {
	if x != nil {
		return x.HaveVerticalRateBarometric
	}
	return false
}

func (x *Message) GetTrack() string {
	if x != nil {
		return x.Track
	}
	return ""
}

func (x *Message) GetMagneticHeading() float64 {
	if x != nil {
		return x.MagneticHeading
	}
	return 0
}

func (x *Message) GetHaveMagneticHeading() bool {
	if x != nil {
		return x.HaveMagneticHeading
	}
	return false
}

func (x *Message) GetTrueHeading() float64 {
	if x != nil {
		return x.TrueHeading
	}
	return 0
}

func (x *Message) GetHaveTrueHeading() bool {
	if x != nil {
		return x.HaveTrueHeading
	}
	return false
}

func (x *Message) GetHaveFmsAltitude() bool {
	if x != nil {
		return x.HaveFmsAltitude
	}
	return false
}

func (x *Message) GetFmsAltitude() int64 {
	if x != nil {
		return x.FmsAltitude
	}
	return 0
}

func (x *Message) GetHaveCategory() bool {
	if x != nil {
		return x.HaveCategory
	}
	return false
}

func (x *Message) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Message) GetGroundSpeed() string {
	if x != nil {
		return x.GroundSpeed
	}
	return ""
}

// State contains general information about a sighting.
type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 6 character hex identifier for aircraft
	Icao string `protobuf:"bytes,1,opt,name=Icao,proto3" json:"Icao,omitempty"`
	// Contains aircraft registration, type, and description of the aircraft
	Info *AircraftInfo `protobuf:"bytes,2,opt,name=Info,proto3" json:"Info,omitempty"`
	// OperatorCode is a three letter code which references the operator for
	// this flight. The field is not empty if the callsign begins with three
	// letters followed by a number.
	OperatorCode string `protobuf:"bytes,3,opt,name=OperatorCode,proto3" json:"OperatorCode,omitempty"`
	// Operator information contains the name of the operator and its country.
	// It will only be set if the `OperatorCode` is found in the database.
	Operator *Operator `protobuf:"bytes,4,opt,name=Operator,proto3" json:"Operator,omitempty"`
	// barometric altitude in feet
	HaveAltitudeBarometric bool  `protobuf:"varint,10,opt,name=HaveAltitudeBarometric,proto3" json:"HaveAltitudeBarometric,omitempty"`
	AltitudeBarometric     int64 `protobuf:"varint,11,opt,name=AltitudeBarometric,proto3" json:"AltitudeBarometric,omitempty"`
	// geometric altitude in feet
	HaveAltitudeGeometric bool  `protobuf:"varint,12,opt,name=HaveAltitudeGeometric,proto3" json:"HaveAltitudeGeometric,omitempty"`
	AltitudeGeometric     int64 `protobuf:"varint,13,opt,name=AltitudeGeometric,proto3" json:"AltitudeGeometric,omitempty"`
	// HaveLocation - used to indicate whether Latitude and Longitude are set.
	HaveLocation bool `protobuf:"varint,20,opt,name=HaveLocation,proto3" json:"HaveLocation,omitempty"`
	// Latitude
	Latitude float64 `protobuf:"fixed64,21,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	// Longitude
	Longitude float64 `protobuf:"fixed64,22,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	// HaveCallsign - indicates whether Callsign is set.
	HaveCallsign bool `protobuf:"varint,30,opt,name=HaveCallsign,proto3" json:"HaveCallsign,omitempty"`
	// Callsign or flight identifier
	CallSign string `protobuf:"bytes,31,opt,name=CallSign,proto3" json:"CallSign,omitempty"`
	// HaveSquawk - indicates whether Squawk is set.
	HaveSquawk bool `protobuf:"varint,40,opt,name=HaveSquawk,proto3" json:"HaveSquawk,omitempty"`
	// Squawk - 4 digit octal number (as string)
	Squawk string `protobuf:"bytes,41,opt,name=Squawk,proto3" json:"Squawk,omitempty"`
	// HaveCountry - indicates whether Country and CountryCode fields are set.
	HaveCountry bool `protobuf:"varint,50,opt,name=HaveCountry,proto3" json:"HaveCountry,omitempty"`
	// CountryCode - Aircraft registration country determined by ICAO Country Allocation
	// CountryCode is ISO3166 2 letter code
	CountryCode string `protobuf:"bytes,51,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	// Country is the long country name
	Country string `protobuf:"bytes,52,opt,name=Country,proto3" json:"Country,omitempty"`
	// IsOnGround tracks whether the aircraft is on ground or in the air.
	IsOnGround bool `protobuf:"varint,60,opt,name=IsOnGround,proto3" json:"IsOnGround,omitempty"`
	// HaveVerticalRateBarometric indicates whether VerticalRateBarometric is set.
	HaveVerticalRateBarometric bool `protobuf:"varint,70,opt,name=HaveVerticalRateBarometric,proto3" json:"HaveVerticalRateBarometric,omitempty"`
	// VerticalRateBarometric - barometric change in vertical rate (+/-) in feet per minute
	VerticalRateBarometric int64 `protobuf:"varint,71,opt,name=VerticalRateBarometric,proto3" json:"VerticalRateBarometric,omitempty"`
	// HaveVerticalRateGeometric indicates whether VerticalRateGeometric is set.
	HaveVerticalRateGeometric bool `protobuf:"varint,75,opt,name=HaveVerticalRateGeometric,proto3" json:"HaveVerticalRateGeometric,omitempty"`
	// VerticalRateGeometric - geometric change in vertical rate (+/-) in feet per minute
	VerticalRateGeometric int64 `protobuf:"varint,76,opt,name=VerticalRateGeometric,proto3" json:"VerticalRateGeometric,omitempty"`
	// HaveTrack indicates whether Track is set.
	HaveTrack bool    `protobuf:"varint,80,opt,name=HaveTrack,proto3" json:"HaveTrack,omitempty"`
	Track     float64 `protobuf:"fixed64,81,opt,name=Track,proto3" json:"Track,omitempty"`
	// HaveFmsAltitude indicates whether FmsAltitude is set.
	HaveFmsAltitude bool `protobuf:"varint,85,opt,name=HaveFmsAltitude,proto3" json:"HaveFmsAltitude,omitempty"`
	// FmsAltitude - the target altitude set on navigation instruments
	FmsAltitude int64 `protobuf:"varint,86,opt,name=FmsAltitude,proto3" json:"FmsAltitude,omitempty"`
	// HaveGroundSpeed indicates whether GroundSpeed is set.
	HaveGroundSpeed bool `protobuf:"varint,90,opt,name=HaveGroundSpeed,proto3" json:"HaveGroundSpeed,omitempty"`
	// GroundSpeed - the ground speed in knots
	GroundSpeed float64 `protobuf:"fixed64,91,opt,name=GroundSpeed,proto3" json:"GroundSpeed,omitempty"`
	// HaveCategory indicates whether Category is set.
	HaveCategory bool `protobuf:"varint,100,opt,name=HaveCategory,proto3" json:"HaveCategory,omitempty"`
	// Category - the transponder type
	Category string `protobuf:"bytes,101,opt,name=Category,proto3" json:"Category,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *State) GetIcao() string {
	if x != nil {
		return x.Icao
	}
	return ""
}

func (x *State) GetInfo() *AircraftInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *State) GetOperatorCode() string {
	if x != nil {
		return x.OperatorCode
	}
	return ""
}

func (x *State) GetOperator() *Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *State) GetHaveAltitudeBarometric() bool {
	if x != nil {
		return x.HaveAltitudeBarometric
	}
	return false
}

func (x *State) GetAltitudeBarometric() int64 {
	if x != nil {
		return x.AltitudeBarometric
	}
	return 0
}

func (x *State) GetHaveAltitudeGeometric() bool {
	if x != nil {
		return x.HaveAltitudeGeometric
	}
	return false
}

func (x *State) GetAltitudeGeometric() int64 {
	if x != nil {
		return x.AltitudeGeometric
	}
	return 0
}

func (x *State) GetHaveLocation() bool {
	if x != nil {
		return x.HaveLocation
	}
	return false
}

func (x *State) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *State) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *State) GetHaveCallsign() bool {
	if x != nil {
		return x.HaveCallsign
	}
	return false
}

func (x *State) GetCallSign() string {
	if x != nil {
		return x.CallSign
	}
	return ""
}

func (x *State) GetHaveSquawk() bool {
	if x != nil {
		return x.HaveSquawk
	}
	return false
}

func (x *State) GetSquawk() string {
	if x != nil {
		return x.Squawk
	}
	return ""
}

func (x *State) GetHaveCountry() bool {
	if x != nil {
		return x.HaveCountry
	}
	return false
}

func (x *State) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *State) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *State) GetIsOnGround() bool {
	if x != nil {
		return x.IsOnGround
	}
	return false
}

func (x *State) GetHaveVerticalRateBarometric() bool {
	if x != nil {
		return x.HaveVerticalRateBarometric
	}
	return false
}

func (x *State) GetVerticalRateBarometric() int64 {
	if x != nil {
		return x.VerticalRateBarometric
	}
	return 0
}

func (x *State) GetHaveVerticalRateGeometric() bool {
	if x != nil {
		return x.HaveVerticalRateGeometric
	}
	return false
}

func (x *State) GetVerticalRateGeometric() int64 {
	if x != nil {
		return x.VerticalRateGeometric
	}
	return 0
}

func (x *State) GetHaveTrack() bool {
	if x != nil {
		return x.HaveTrack
	}
	return false
}

func (x *State) GetTrack() float64 {
	if x != nil {
		return x.Track
	}
	return 0
}

func (x *State) GetHaveFmsAltitude() bool {
	if x != nil {
		return x.HaveFmsAltitude
	}
	return false
}

func (x *State) GetFmsAltitude() int64 {
	if x != nil {
		return x.FmsAltitude
	}
	return 0
}

func (x *State) GetHaveGroundSpeed() bool {
	if x != nil {
		return x.HaveGroundSpeed
	}
	return false
}

func (x *State) GetGroundSpeed() float64 {
	if x != nil {
		return x.GroundSpeed
	}
	return 0
}

func (x *State) GetHaveCategory() bool {
	if x != nil {
		return x.HaveCategory
	}
	return false
}

func (x *State) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x61, 0x69, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x7e, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2f, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x64, 0x73, 0x62, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x65, 0x61, 0x73,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x01, 0x22, 0x1c, 0x0a, 0x06, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x73, 0x73, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x52, 0x73, 0x73, 0x69, 0x22, 0x7e, 0x0a, 0x0c, 0x41, 0x69, 0x72, 0x63, 0x72,
	0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x46, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x46, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x52, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x52, 0x22, 0xb5, 0x07, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x69, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x61, 0x69, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52,
	0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x61, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x61, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x71, 0x75, 0x61, 0x77, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x71, 0x75,
	0x61, 0x77, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x12,
	0x2c, 0x0a, 0x11, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x41, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x2e, 0x0a,
	0x12, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1a, 0x0a,
	0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x4f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x4f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3c, 0x0a,
	0x19, 0x48, 0x61, 0x76, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74,
	0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x19, 0x48, 0x61, 0x76, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61,
	0x74, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x36, 0x0a, 0x16, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x42, 0x61, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x3e, 0x0a, 0x1a, 0x48, 0x61, 0x76, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x48, 0x61, 0x76, 0x65, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x67,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x48, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x67, 0x6e, 0x65,
	0x74, 0x69, 0x63, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x48, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x48, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x75, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x54, 0x72, 0x75, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x61, 0x76, 0x65, 0x54,
	0x72, 0x75, 0x65, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x48, 0x61, 0x76, 0x65, 0x54, 0x72, 0x75, 0x65, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x61, 0x76, 0x65, 0x46, 0x6d, 0x73, 0x41, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x48, 0x61, 0x76, 0x65,
	0x46, 0x6d, 0x73, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46,
	0x6d, 0x73, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x46, 0x6d, 0x73, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x48, 0x61, 0x76, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x48, 0x61, 0x76, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22,
	0xb3, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x61,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x61, 0x6f, 0x12, 0x2a, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69,
	0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a,
	0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x69, 0x72, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a,
	0x16, 0x48, 0x61, 0x76, 0x65, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x61, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x48,
	0x61, 0x76, 0x65, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x61, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x61, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x15, 0x48, 0x61, 0x76, 0x65, 0x41, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x48, 0x61, 0x76, 0x65, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x11, 0x41,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x61, 0x76,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x48, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x61, 0x76, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x48,
	0x61, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x61, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x61, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x61, 0x76, 0x65, 0x53,
	0x71, 0x75, 0x61, 0x77, 0x6b, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x48, 0x61, 0x76,
	0x65, 0x53, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x71, 0x75, 0x61, 0x77,
	0x6b, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x12,
	0x20, 0x0a, 0x0b, 0x48, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x48, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x73, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x49, 0x73, 0x4f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3e, 0x0a,
	0x1a, 0x48, 0x61, 0x76, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x48, 0x61, 0x76, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x36, 0x0a,
	0x16, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x42, 0x61, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x47, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x42, 0x61, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3c, 0x0a, 0x19, 0x48, 0x61, 0x76, 0x65, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x48, 0x61, 0x76, 0x65, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x4c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65,
	0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x61, 0x76,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x48, 0x61,
	0x76, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x18, 0x51, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x0a,
	0x0f, 0x48, 0x61, 0x76, 0x65, 0x46, 0x6d, 0x73, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x55, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x48, 0x61, 0x76, 0x65, 0x46, 0x6d, 0x73, 0x41,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x6d, 0x73, 0x41, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x46, 0x6d,
	0x73, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x61, 0x76,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x48, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x61, 0x76, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x48, 0x61, 0x76,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x66, 0x6b, 0x31, 0x31, 0x2f, 0x61, 0x69, 0x72, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_message_proto_goTypes = []interface{}{
	(Source_SourceType)(0), // 0: airtrack.Source.SourceType
	(*Source)(nil),         // 1: airtrack.Source
	(*Signal)(nil),         // 2: airtrack.Signal
	(*AircraftInfo)(nil),   // 3: airtrack.AircraftInfo
	(*Operator)(nil),       // 4: airtrack.Operator
	(*Message)(nil),        // 5: airtrack.Message
	(*State)(nil),          // 6: airtrack.State
}
var file_message_proto_depIdxs = []int32{
	0, // 0: airtrack.Source.Type:type_name -> airtrack.Source.SourceType
	1, // 1: airtrack.Message.Source:type_name -> airtrack.Source
	2, // 2: airtrack.Message.Signal:type_name -> airtrack.Signal
	3, // 3: airtrack.State.Info:type_name -> airtrack.AircraftInfo
	4, // 4: airtrack.State.Operator:type_name -> airtrack.Operator
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AircraftInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		EnumInfos:         file_message_proto_enumTypes,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
