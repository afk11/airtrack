package acmap

import (
	"encoding/json"
	"github.com/afk11/airtrack/pkg/tracker"
	"github.com/gorilla/mux"
	"github.com/pkg/errors"
	log "github.com/sirupsen/logrus"
	"net/http"
	"time"
)

type HistoryUpdateScheduler struct {
	m tracker.MapAccess
}

func (s *HistoryUpdateScheduler) UpdateHistory(projects []string) error {
	for _, project := range projects {
		err := s.m.GetProjectAircraft(project, func(messageCount int64, fields []*tracker.JsonAircraft) error {
			ac := jsonAircraft{
				Now:      float64(time.Now().Unix()),
				Messages: messageCount,
				Aircraft: fields,
			}
			_, err := json.Marshal(ac)
			if err != nil {
				return err
			}
			return nil
		})
		if err == tracker.UnknownProject {
		} else if err != nil {
			panic(err)
		}
	}
	return nil
}

func NewDump1090Map(ma tracker.MapAccess) *Dump1090Map {
	return &Dump1090Map{m: ma}
}

type Dump1090Map struct {
	m tracker.MapAccess
}

func (d *Dump1090Map) MapService() string {
	return "dump1090"
}
func (d *Dump1090Map) UpdateScheduler() tracker.MapHistoryUpdateScheduler {
	return &HistoryUpdateScheduler{d.m}
}
func (d *Dump1090Map) statics() []string {
	return []string{"planeObject.js",
		"style.css",
		"ol/ol3-layerswitcher.css",
		"ol/ol3-layerswitcher.js",
		"ol/ol-4.4.2.css",
		"ol/ol-4.4.2.js",
		"db/A12.json",
		"db/A38.json",
		"db/ABA.json",
		"db/A41.json",
		"db/2.json",
		"db/44.json",
		"db/A9.json",
		"db/A83.json",
		"db/A01.json",
		"db/A06.json",
		"db/A09.json",
		"db/ACD.json",
		"db/A87.json",
		"db/A18.json",
		"db/A5E.json",
		"db/A07.json",
		"db/AC7.json",
		"db/A64.json",
		"db/AB4.json",
		"db/AC1.json",
		"db/AA5.json",
		"db/AA6.json",
		"db/ACC.json",
		"db/AD0.json",
		"db/A7C.json",
		"db/AC8.json",
		"db/D.json",
		"db/A6E.json",
		"db/A37.json",
		"db/AAB.json",
		"db/A59.json",
		"db/A6B.json",
		"db/A3.json",
		"db/A3F.json",
		"db/AB9.json",
		"db/A08.json",
		"db/A31.json",
		"db/39.json",
		"db/ACA.json",
		"db/A6A.json",
		"db/A24.json",
		"db/AD2.json",
		"db/AB5.json",
		"db/A32.json",
		"db/A3E.json",
		"db/ABD.json",
		"db/A45.json",
		"db/AD3.json",
		"db/AD7.json",
		"db/AAD.json",
		"db/A44.json",
		"db/README",
		"db/A9C.json",
		"db/A03.json",
		"db/A86.json",
		"db/A81.json",
		"db/A2C.json",
		"db/A0F.json",
		"db/A54.json",
		"db/A72.json",
		"db/A76.json",
		"db/ACE.json",
		"db/A58.json",
		"db/9.json",
		"db/A47.json",
		"db/A23.json",
		"db/A96.json",
		"db/AC3.json",
		"db/AC4.json",
		"db/A4.json",
		"db/A40.json",
		"db/A3C.json",
		"db/A7E.json",
		"db/4C.json",
		"db/A9A.json",
		"db/ADB.json",
		"db/484.json",
		"db/A2D.json",
		"db/AB6.json",
		"db/A19.json",
		"db/AB1.json",
		"db/AD.json",
		"db/A7F.json",
		"db/A0A.json",
		"db/A25.json",
		"db/A94.json",
		"db/A35.json",
		"db/A7.json",
		"db/4D.json",
		"db/AB3.json",
		"db/A1D.json",
		"db/A1E.json",
		"db/6.json",
		"db/A51.json",
		"db/A27.json",
		"db/ADA.json",
		"db/A02.json",
		"db/A20.json",
		"db/A8.json",
		"db/A0C.json",
		"db/A6.json",
		"db/A2F.json",
		"db/A82.json",
		"db/AA.json",
		"db/8.json",
		"db/A60.json",
		"db/A52.json",
		"db/A05.json",
		"db/AA2.json",
		"db/AAA.json",
		"db/B.json",
		"db/A77.json",
		"db/A36.json",
		"db/AD8.json",
		"db/A2.json",
		"db/F.json",
		"db/A99.json",
		"db/AB2.json",
		"db/A1F.json",
		"db/A5A.json",
		"db/E.json",
		"db/A42.json",
		"db/A6D.json",
		"db/AC.json",
		"db/A29.json",
		"db/A14.json",
		"db/A6F.json",
		"db/A7D.json",
		"db/AA0.json",
		"db/A78.json",
		"db/A80.json",
		"db/A8A.json",
		"db/ABC.json",
		"db/A33.json",
		"db/3C.json",
		"db/A0B.json",
		"db/A21.json",
		"db/A8D.json",
		"db/5.json",
		"db/A2A.json",
		"db/A69.json",
		"db/A98.json",
		"db/A11.json",
		"db/AC6.json",
		"db/A43.json",
		"db/A97.json",
		"db/A5.json",
		"db/AB.json",
		"db/A88.json",
		"db/A1C.json",
		"db/A16.json",
		"db/A8B.json",
		"db/AC2.json",
		"db/A74.json",
		"db/A73.json",
		"db/40.json",
		"db/1.json",
		"db/A1A.json",
		"db/ACF.json",
		"db/A9F.json",
		"db/AB7.json",
		"db/A34.json",
		"db/A71.json",
		"db/AC9.json",
		"db/ACB.json",
		"db/A4A.json",
		"db/A70.json",
		"db/A67.json",
		"db/A92.json",
		"db/A90.json",
		"db/A89.json",
		"db/A48.json",
		"db/A9B.json",
		"db/A84.json",
		"db/AD1.json",
		"db/A1B.json",
		"db/A53.json",
		"db/AB8.json",
		"db/A85.json",
		"db/A95.json",
		"db/A.json",
		"db/3.json",
		"db/ABB.json",
		"db/AD5.json",
		"db/AAF.json",
		"db/A3B.json",
		"db/A65.json",
		"db/A4B.json",
		"db/A63.json",
		"db/A68.json",
		"db/A79.json",
		"db/A5D.json",
		"db/A39.json",
		"db/AAE.json",
		"db/A1.json",
		"db/7.json",
		"db/48.json",
		"db/A3A.json",
		"db/AD4.json",
		"db/43.json",
		"db/AA7.json",
		"db/A66.json",
		"db/A00.json",
		"db/A15.json",
		"db/A5B.json",
		"db/A17.json",
		"db/A04.json",
		"db/A9E.json",
		"db/A26.json",
		"db/A4F.json",
		"db/ADD.json",
		"db/aircraft_types/README",
		"db/aircraft_types/icao_aircraft_types.json",
		"db/A22.json",
		"db/A8C.json",
		"db/AB0.json",
		"db/AA1.json",
		"db/4B.json",
		"db/A9D.json",
		"db/A0.json",
		"db/A57.json",
		"db/A4C.json",
		"db/A50.json",
		"db/A4D.json",
		"db/A56.json",
		"db/A55.json",
		"db/AA8.json",
		"db/4.json",
		"db/A2E.json",
		"db/0.json",
		"db/ADC.json",
		"db/ADE.json",
		"db/C.json",
		"db/AA3.json",
		"db/AD6.json",
		"db/42.json",
		"db/A4E.json",
		"db/AA4.json",
		"db/406.json",
		"db/A6C.json",
		"db/400.json",
		"db/A0D.json",
		"script.js",
		"spinny.gif",
		"images/ff-sa-logo@2x.png",
		"images/map-icon@3x.png",
		"images/box-checked.png",
		"images/toggle-width@2x.png",
		"images/ff-sv-logo@2x.png",
		"images/show_sidebar_active_48x40.png",
		"images/column-adjust@3x.png",
		"images/zoom-out.png",
		"images/pa-sa-logo@3x.png",
		"images/zoom-in@2x.png",
		"images/show_sidebar_inactive_48x40.png",
		"images/box-checked@2x.png",
		"images/pa-sa-logo.png",
		"images/settings-icon.png",
		"images/fa_logo_color@2x.png",
		"images/toggle-height@2x.png",
		"images/settings-icon@3x.png",
		"images/pa-sv-logo@3x.png",
		"images/hide_sidebar_active_48x40.png",
		"images/zoom-out@2x.png",
		"images/hide_sidebar_inactive_48x40.png",
		"images/close-settings@3x.png",
		"images/alt_legend_feet.svg",
		"images/table-icon.png",
		"images/map-icon.png",
		"images/settings-icon@2x.png",
		"images/fa_logo_color.png",
		"images/box-empty@3x.png",
		"images/zoom-in.png",
		"images/box-empty@2x.png",
		"images/box-checked@3x.png",
		"images/map-icon@2x.png",
		"images/icon-information@2x.png",
		"images/pa-sa-logo@2x.png",
		"images/close-settings.png",
		"images/table-icon@2x.png",
		"images/pa-sv-logo.png",
		"images/close-settings@2x.png",
		"images/ff-sv-logo.png",
		"images/ff-sv-logo@3x.png",
		"images/zoom-in@3x.png",
		"images/zoom-out@3x.png",
		"images/pa-sv-logo@2x.png",
		"images/ff-sa-logo.png",
		"images/fa_logo_color@3x.png",
		"images/box-empty.png",
		"images/ff-sa-logo@3x.png",
		"images/alt_legend_meters.svg",
		"images/column-adjust.png",
		"images/column-adjust@2x.png",
		"images/table-icon@3x.png",
		"jquery/plugins/jquery.validate.min.js",
		"jquery/README",
		"jquery/jquery-ui-1.11.4-smoothness.css",
		"jquery/jquery-3.0.0.min.js",
		"jquery/jquery-ui-1.11.4.min.js",
		"test/markers_test.js",
		"test/markers_test.html",
		"flags-tiny/Hungary.png",
		"flags-tiny/Laos.png",
		"flags-tiny/Cayman_Islands.png",
		"flags-tiny/Brazil.png",
		"flags-tiny/France.png",
		"flags-tiny/Chile.png",
		"flags-tiny/Oman.png",
		"flags-tiny/Christmas_Island.png",
		"flags-tiny/Portugal.png",
		"flags-tiny/Libya.png",
		"flags-tiny/Equatorial_Guinea.png",
		"flags-tiny/Belgium.png",
		"flags-tiny/Bulgaria.png",
		"flags-tiny/Moldova.png",
		"flags-tiny/Wallis_and_Futuna.png",
		"flags-tiny/Togo.png",
		"flags-tiny/Bolivia.png",
		"flags-tiny/Israel.png",
		"flags-tiny/Algeria.png",
		"flags-tiny/Singapore.png",
		"flags-tiny/Kiribati.png",
		"flags-tiny/Falkland_Islands.png",
		"flags-tiny/Yugoslavia.png",
		"flags-tiny/Cambodia.png",
		"flags-tiny/UAE.png",
		"flags-tiny/Austria.png",
		"flags-tiny/Greece.png",
		"flags-tiny/Kenya.png",
		"flags-tiny/Croatia.png",
		"flags-tiny/Tibet.png",
		"flags-tiny/South_Georgia.png",
		"flags-tiny/Barbados.png",
		"flags-tiny/Nigeria.png",
		"flags-tiny/Australia.png",
		"flags-tiny/Guinea_Bissau.png",
		"flags-tiny/Nepal.png",
		"flags-tiny/South_Korea.png",
		"flags-tiny/Tajikistan.png",
		"flags-tiny/Monaco.png",
		"flags-tiny/Romania.png",
		"flags-tiny/Comoros.png",
		"flags-tiny/Belize.png",
		"flags-tiny/New_Zealand.png",
		"flags-tiny/Belarus.png",
		"flags-tiny/Myanmar.png",
		"flags-tiny/Iran.png",
		"flags-tiny/Saint_Lucia.png",
		"flags-tiny/Vietnam.png",
		"flags-tiny/Canada.png",
		"flags-tiny/Samoa.png",
		"flags-tiny/Cote_d_Ivoire.png",
		"flags-tiny/Egypt.png",
		"flags-tiny/Ecuador.png",
		"flags-tiny/Tunisia.png",
		"flags-tiny/Niger.png",
		"flags-tiny/Faroe_Islands.png",
		"flags-tiny/Armenia.png",
		"flags-tiny/Vatican_City.png",
		"flags-tiny/Cyprus_Northern.png",
		"flags-tiny/Colombia.png",
		"flags-tiny/Azerbaijan.png",
		"flags-tiny/Greenland.png",
		"flags-tiny/Nicaragua.png",
		"flags-tiny/Mali.png",
		"flags-tiny/North_Korea.png",
		"flags-tiny/Madagascar.png",
		"flags-tiny/Djibouti.png",
		"flags-tiny/Aruba.png",
		"flags-tiny/Liechtenstein.png",
		"flags-tiny/Macao.png",
		"flags-tiny/Andorra.png",
		"flags-tiny/Gabon.png",
		"flags-tiny/Bosnia.png",
		"flags-tiny/British_Virgin_Islands.png",
		"flags-tiny/Sao_Tome_and_Principe.png",
		"flags-tiny/Gambia.png",
		"flags-tiny/Gibraltar.png",
		"flags-tiny/Lesotho.png",
		"flags-tiny/Morocco.png",
		"flags-tiny/United_States_of_America.png",
		"flags-tiny/Guyana.png",
		"flags-tiny/Timor-Leste.png",
		"flags-tiny/Iraq.png",
		"flags-tiny/Honduras.png",
		"flags-tiny/Grenada.png",
		"flags-tiny/Estonia.png",
		"flags-tiny/Guam.png",
		"flags-tiny/Soviet_Union.png",
		"flags-tiny/Netherlands_Antilles.png",
		"flags-tiny/Papua_New_Guinea.png",
		"flags-tiny/Cameroon.png",
		"flags-tiny/San_Marino.png",
		"flags-tiny/Saint_Pierre.png",
		"flags-tiny/Bangladesh.png",
		"flags-tiny/Seychelles.png",
		"flags-tiny/Indonesia.png",
		"flags-tiny/blank.png",
		"flags-tiny/Norfolk_Island.png",
		"flags-tiny/Niue.png",
		"flags-tiny/Cuba.png",
		"flags-tiny/Poland.png",
		"flags-tiny/Yemen.png",
		"flags-tiny/Sudan.png",
		"flags-tiny/Democratic_Republic_of_the_Congo.png",
		"flags-tiny/Bahrain.png",
		"flags-tiny/Russian_Federation.png",
		"flags-tiny/Latvia.png",
		"flags-tiny/Switzerland.png",
		"flags-tiny/Ireland.png",
		"flags-tiny/Thailand.png",
		"flags-tiny/Ukraine.png",
		"flags-tiny/Nauru.png",
		"flags-tiny/Zambia.png",
		"flags-tiny/Macedonia.png",
		"flags-tiny/Georgia.png",
		"flags-tiny/Afghanistan.png",
		"flags-tiny/Malawi.png",
		"flags-tiny/Tonga.png",
		"flags-tiny/Zimbabwe.png",
		"flags-tiny/Chad.png",
		"flags-tiny/Marshall_Islands.png",
		"flags-tiny/Brunei.png",
		"flags-tiny/Hong_Kong.png",
		"flags-tiny/American_Samoa.png",
		"flags-tiny/Uruguay.png",
		"flags-tiny/Saint_Vicent_and_the_Grenadines.png",
		"flags-tiny/Cook_Islands.png",
		"flags-tiny/El_Salvador.png",
		"flags-tiny/Venezuela.png",
		"flags-tiny/Taiwan.png",
		"flags-tiny/Italy.png",
		"flags-tiny/Trinidad_and_Tobago.png",
		"flags-tiny/Swaziland.png",
		"flags-tiny/Uzbekistan.png",
		"flags-tiny/Peru.png",
		"flags-tiny/Cyprus.png",
		"flags-tiny/Burkina_Faso.png",
		"flags-tiny/Micronesia.png",
		"flags-tiny/README.txt",
		"flags-tiny/Kazakhstan.png",
		"flags-tiny/Pitcairn_Islands.png",
		"flags-tiny/Germany.png",
		"flags-tiny/US_Virgin_Islands.png",
		"flags-tiny/United_Kingdom.png",
		"flags-tiny/Netherlands.png",
		"flags-tiny/Jamaica.png",
		"flags-tiny/Turks_and_Caicos_Islands.png",
		"flags-tiny/Cape_Verde.png",
		"flags-tiny/Bermuda.png",
		"flags-tiny/Guatemala.png",
		"flags-tiny/Dominican_Republic.png",
		"flags-tiny/Angola.png",
		"flags-tiny/Lebanon.png",
		"flags-tiny/Republic_of_the_Congo.png",
		"flags-tiny/Luxembourg.png",
		"flags-tiny/Malta.png",
		"flags-tiny/Botswana.png",
		"flags-tiny/Jordan.png",
		"flags-tiny/Argentina.png",
		"flags-tiny/Anguilla.png",
		"flags-tiny/Bhutan.png",
		"flags-tiny/Fiji.png",
		"flags-tiny/Sri_Lanka.png",
		"flags-tiny/Mauritania.png",
		"flags-tiny/Uganda.png",
		"flags-tiny/Montenegro.png",
		"flags-tiny/Iceland.png",
		"flags-tiny/Turkey.png",
		"flags-tiny/Pakistan.png",
		"flags-tiny/Palau.png",
		"flags-tiny/Mozambique.png",
		"flags-tiny/Somalia.png",
		"flags-tiny/Bahamas.png",
		"flags-tiny/Denmark.png",
		"flags-tiny/China.png",
		"flags-tiny/Mauritius.png",
		"flags-tiny/Namibia.png",
		"flags-tiny/Senegal.png",
		"flags-tiny/South_Africa.png",
		"flags-tiny/Sierra_Leone.png",
		"flags-tiny/Paraguay.png",
		"flags-tiny/Kyrgyzstan.png",
		"flags-tiny/Slovakia.png",
		"flags-tiny/Liberia.png",
		"flags-tiny/Puerto_Rico.png",
		"flags-tiny/Spain.png",
		"flags-tiny/Suriname.png",
		"flags-tiny/Burundi.png",
		"flags-tiny/Mexico.png",
		"flags-tiny/French_Polynesia.png",
		"flags-tiny/Slovenia.png",
		"flags-tiny/Vanuatu.png",
		"flags-tiny/Guinea.png",
		"flags-tiny/Qatar.png",
		"flags-tiny/Panama.png",
		"flags-tiny/Lithuania.png",
		"flags-tiny/Maldives.png",
		"flags-tiny/Tuvalu.png",
		"flags-tiny/Rwanda.png",
		"flags-tiny/Malaysia.png",
		"flags-tiny/Saint_Kitts_and_Nevis.png",
		"flags-tiny/Mongolia.png",
		"flags-tiny/Kuwait.png",
		"flags-tiny/Benin.png",
		"flags-tiny/Haiti.png",
		"flags-tiny/Serbia.png",
		"flags-tiny/Martinique.png",
		"flags-tiny/Sweden.png",
		"flags-tiny/Turkmenistan.png",
		"flags-tiny/Japan.png",
		"flags-tiny/Norway.png",
		"flags-tiny/Finland.png",
		"flags-tiny/Tanzania.png",
		"flags-tiny/Costa_Rica.png",
		"flags-tiny/India.png",
		"flags-tiny/Czech_Republic.png",
		"flags-tiny/Central_African_Republic.png",
		"flags-tiny/Antigua_and_Barbuda.png",
		"flags-tiny/Philippines.png",
		"flags-tiny/Ghana.png",
		"flags-tiny/Montserrat.png",
		"flags-tiny/Syria.png",
		"flags-tiny/Soloman_Islands.png",
		"flags-tiny/Dominica.png",
		"flags-tiny/Albania.png",
		"flags-tiny/Ethiopia.png",
		"flags-tiny/Eritrea.png",
		"flags-tiny/Saudi_Arabia.png",
		"markers.js",
		"layers.js",
		"formatter.js",
		"index.html",
		"config.js",
		"dbloader.js",
		"flags.js",
		"registrations.js",
	}
}

type assetResponseHandler string

func (h assetResponseHandler) responseHandler(w http.ResponseWriter, r *http.Request) {
	dat, err := Asset(string(h))
	if err != nil {
		panic("asset: Asset(" + string(h) + "): " + err.Error())
	}
	if len(h) > 4 && h[len(h)-4:] == ".css" {
		w.Header().Set("Content-Type", "text/css")
	} else if len(h) > 3 && h[len(h)-3:] == ".js" {
		w.Header().Set("Content-Type", "text/javascript")
	} else if len(h) > 5 && h[len(h)-5:] == ".html" {
		w.Header().Set("Content-Type", "text/html")
	}
	_, err = w.Write(dat)
	if err != nil {
		log.Infof("error writing response: %s", err.Error())
	}
}
func (d *Dump1090Map) RegisterRoutes(r *mux.Router) error {
	r.HandleFunc("/{project}/data/aircraft.json", d.JsonHandler)
	r.HandleFunc("/{project}/data/receiver.json", d.ReceiverHandler)
	for _, file := range d.statics() {
		_, err := Asset(file)
		if err != nil {
			return errors.Wrap(err, "loading dump1090 asset "+file)
		}
		handler := assetResponseHandler(file)
		r.HandleFunc("/{project}/"+file, handler.responseHandler)
	}
	return nil
}
func (d *Dump1090Map) ReceiverHandler(w http.ResponseWriter, r *http.Request) {
	_, err := w.Write([]byte("{ \"version\" : \"v3.8.3\", \"refresh\" : 1000, \"history\" : 32 }"))
	if err != nil {
		w.WriteHeader(500)
		panic(err)
	}
}
func (d *Dump1090Map) JsonHandler(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	err := d.m.GetProjectAircraft(vars["project"], func(messageCount int64, fields []*tracker.JsonAircraft) error {
		ac := jsonAircraft{
			Now:      float64(time.Now().Unix()),
			Messages: messageCount,
			Aircraft: fields,
		}
		data, err := json.Marshal(ac)
		if err != nil {
			return err
		}
		_, err = w.Write(data)
		return err
	})
	if err == tracker.UnknownProject {
		w.WriteHeader(404)
	} else if err != nil {
		w.WriteHeader(500)
		panic(err)
	}
}

type jsonAircraft struct {
	Now      float64                 `json:"now"`
	Messages int64                   `json:"messages"`
	Aircraft []*tracker.JsonAircraft `json:"aircraft"`
}
